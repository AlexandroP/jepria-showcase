<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="war-and-tomcat.deploy" name="Build common product from component products">

  <!-- Создание приложения war общего: src, service-rest -->
  <target name="war" depends="war-gwt, war-service-rest, init-service-rest-product-name">

    <!-- unzip web.jar from war-gwt -->
    <unzip src="gwt/lib/${gwt-product-name}-gwt.war" dest="temp-war-gwt"/>
    <unzip src="temp-war-gwt/WEB-INF/lib/${gwt-product-name}-web.jar" dest="temp-web-jar-gwt"/>


    <if><available file="service-rest" type="dir" /><then><!-- fail-safe if service-rest is missing -->

      <!-- unzip web.jar from war-service-rest -->
      <unzip src="service-rest/target/${service-rest-product-name}.war" dest="temp-war-service-rest"/>
      <unzip src="temp-war-service-rest/WEB-INF/lib/${service-rest-product-name}-web.jar" dest="temp-web-jar-service-rest"/>

      <!-- check classpath collisions within unzipped web.jars -->
      <taskdef classname="com.technology.jep.jepriatoolkit.jar.JarCollisionTask" classpathref="jepria-toolkit-libs" name="jarcollision" />
      <jarcollision classpathroots="temp-web-jar-gwt;temp-web-jar-service-rest" classpathrefs="gwt/lib/${gwt-product-name}-gwt.war/WEB-INF/lib/${gwt-product-name}-web.jar;
        service-rest/target/${service-rest-product-name}.war/WEB-INF/lib/${service-rest-product-name}-web.jar" property="jar-collision"/>
      <fail message="The classpaths have collisions. Fix them before merging into a single war" if="${jar-collision}"/>

      <!-- cleanup -->
      <delete failonerror="false" dir="temp-web-jar-service-rest" />

    </then></if>


    <!-- cleanup -->
    <delete failonerror="false" dir="temp-web-jar-gwt" />


    <!-- merge wars -->
    <copy todir="temp-war-merged">
      <fileset dir="temp-war-gwt"/>
    </copy>

    <if><available file="service-rest" type="dir" /><then><!-- fail-safe if service-rest is missing -->

      <copy todir="temp-war-merged">
        <fileset dir="temp-war-service-rest"/>
      </copy>

    </then></if>

    <!-- delete the merged web.xml, copy common web.xml instead -->
    <delete file="temp-war-merged/WEB-INF/web.xml"/>
    <copy todir="temp-war-merged/WEB-INF" file="webapp/WEB-INF/web.xml"/>

    <!-- pack jar -->
    <jar basedir="temp-war-merged" destfile="lib/${gwt-product-name}.war" />

    <!-- cleanup -->
    <delete failonerror="false" dir="temp-war-gwt" />
    <delete failonerror="false" dir="temp-war-service-rest" />
    <delete failonerror="false" dir="temp-war-merged" />

  </target>

  <target name="clean" depends="clean-gwt, clean-service-rest"/>

  <!-- invokes "clean" target for the gwt/build.xml ant buildfile -->
  <target name="clean-gwt">
    <exec executable="cmd" failonerror="true"> <!-- failonerror is important -->
      <arg value="/c"/>
      <arg value="cd gwt &amp;&amp; ant clean &amp;&amp; cd .."/>
    </exec>
  </target>

  <!-- invokes "war" target for the gwt/build.xml ant buildfile -->
  <target name="war-gwt" depends="init-gwt">
    <exec executable="cmd" failonerror="true"> <!-- failonerror is important -->
      <arg value="/c"/>
      <arg value="cd gwt &amp;&amp; ant war &amp;&amp; cd .."/>
    </exec>
  </target>

  <!-- invokes "clean" target for the service-rest/build.xml ant buildfile -->
  <target name="clean-service-rest">
    <exec executable="cmd" failonerror="true"> <!-- failonerror is important -->
      <arg value="/c"/>
      <arg value="cd service-rest &amp;&amp; ant clean &amp;&amp; cd .."/>
    </exec>
  </target>

  <!-- invokes "war" target for the service-rest/build.xml ant buildfile -->
  <target name="war-service-rest">
    <if><available file="service-rest" type="dir" /><then><!-- fail-safe if service-rest is missing -->

      <exec executable="cmd" failonerror="true"> <!-- failonerror is important -->
        <arg value="/c"/>
        <!--arg value="cd service-rest &amp;&amp; ant war &amp;&amp; cd .."/-->
        <arg value="cd service-rest &amp;&amp; mvn clean package &amp;&amp; cd .."/>
		
      </exec>

    </then></if>
  </target>

  <target name="init-gwt">
    <!-- get product name and set it to the "gwt-product-name" property -->
    <path id="gwt-product">
      <fileset dir="gwt/lib">
        <include name="*.war"/> <!-- TODO if the product.war does not exist, the build scenario will still continue execution. Check whether the product.war is present-->
      </fileset>
    </path>
    <property name="gwt-product-path" refid="gwt-product"/>
    <basename property="gwt-product-file" file="${gwt-product-path}"/>
    <propertyregex defaultvalue="" input="${gwt-product-file}" override="true" property="gwt-product-name" regexp="^(.+)-gwt\.war$" select="\1" />
  </target>

  <target name="init-service-rest-product-name">
    <if><available file="service-rest" type="dir" /><then><!-- fail-safe if service-rest is missing -->

      <!-- get product name and set it to the "service-rest-product-name" property -->
      <path id="service-rest-product">
        <fileset dir="service-rest/target">
          <include name="*.war"/> <!-- TODO if the product.war does not exist, the build scenario will still continue execution. Check whether the product.war is present-->
        </fileset>
      </path>
      <property name="service-rest-product-path" refid="service-rest-product"/>
      <basename property="service-rest-product-file" file="${service-rest-product-path}"/>
      <propertyregex defaultvalue="" input="${service-rest-product-file}" override="true" property="service-rest-product-name" regexp="^(.+)\.war$" select="\1" />

    </then></if>
  </target>







  <target name="release-doc" /> <!-- TODO release docs for each product? -->




  <!-- Обратная совместимость со старым сценарием сборки: собственно фрагменты кода из исторического App/build.xml (необходимые для администрирования приложений) -->





  <!-- Значения property - immutable, если BIN_HOME не был задан ранее, то берется из переменной окружения -->
  <property environment="env" />
  <property name="BIN_HOME" value="${env.BIN_HOME}" />
  <!-- Проверка, что BIN_HOME определен, иначе - ошибка -->
  <fail unless="BIN_HOME" message="Binary repository path not specified. Specify it either in environment variable %BIN_HOME% or use -DBIN_HOME=... command line argument." />

  <!-- ... -->

  <property file="dependency.properties" />

  <!-- ... -->

  <property file="deploy.properties" />

  <!-- ... -->

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${ANT-CONTRIB_LIB}"/>
    </classpath>
  </taskdef>

  <!-- ... -->

  <path id="jepria-toolkit-libs">
    <!-- ... -->
    <pathelement location="${JEPRIA-TOOLKIT_LIB}" />
    <!-- ... -->
  </path>

  <!-- ... -->

  <path id="tomcat-libs">
    <pathelement location="${TOMCAT-CATALINA-ANT_LIB}" />
    <pathelement location="${TOMCAT-COYOTE_LIB}" />
    <pathelement location="${TOMCAT-UTIL_LIB}" />
  </path>

  <!-- Проверка наличия всех используемых библиотек (зависимостей) -->

  <target name="check-build-dependencies">

    <propertyregex property="BIN_HOME_BUILD"
                   input="${BIN_HOME}/build/"
                   regexp="\\"
                   replace="/"
                   global="true"
                   casesensitive="false" />

    <echo message="Binary repository BUILD folder path: ${BIN_HOME_BUILD}" />

    <if>
      <not><isset property="pack.list"/></not>
      <then>
        <propertyselector
                property="pack.list"
                delimiter=","
                match="(([\S])+(\_(lib|jslib))$)?"
                select="\1"
                casesensitive="false" />
      </then>
      <else/>
    </if>

    <echo message="Build dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <propertyregex property="@{lib-path}.name"
                       input="${@{lib-path}}"
                       regexp="\\"
                       replace="/"
                       global="true"
                       casesensitive="false" />
        <if>
          <contains substring="${BIN_HOME_BUILD}" string="${@{lib-path}.name}"/>
          <then>
            <if>
              <available file="${@{lib-path}}"/>
              <then/>
              <else>
                <echo>Required library '${@{lib-path}.name}' is absent</echo>
                <property name="DEPENDENCY_ABSENCE" value="true" />
              </else>
            </if>
          </then>
          <else/>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY FOLDER '${BIN_HOME_BUILD}' PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Build dependency checking succeeded"/>
  </target>

  <target name="check-deploy-dependencies">

    <propertyregex property="BIN_HOME_DEPLOY"
                   input="${BIN_HOME}/deploy/"
                   regexp="\\"
                   replace="/"
                   global="true"
                   casesensitive="false" />

    <echo message="Binary repository DEPLOY folder path: ${BIN_HOME_DEPLOY}" />
    <if>
      <not><isset property="pack.list"/></not>
      <then>
        <propertyselector
                property="pack.list"
                delimiter=","
                match="(([\S])+(\_(lib|jslib))$)?"
                select="\1"
                casesensitive="false" />
      </then>
      <else/>
    </if>

    <echo message="Deploy dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <propertyregex property="@{lib-path}.name"
                       input="${@{lib-path}}"
                       regexp="\\"
                       replace="/"
                       global="true"
                       casesensitive="false" />
        <if>
          <contains substring="${BIN_HOME_DEPLOY}" string="${@{lib-path}.name}"/>
          <then>
            <if>
              <available file="${@{lib-path}}"/>
              <then/>
              <else>
                <echo>Required library '${@{lib-path}.name}' is absent</echo>
                <property name="DEPENDENCY_ABSENCE" value="true" />
              </else>
            </if>
          </then>
          <else/>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY FOLDER '${BIN_HOME_DEPLOY}' PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Deploy dependency checking succeeded"/>
  </target>

  <target name="check-dependencies" depends="check-deploy-dependencies,check-build-dependencies"/>

  <target name="define-toolkit-appinstall">
    <taskdef name="startAppInstall" classname="com.technology.jep.jepriatoolkit.version.appinstall.StartAppInstall" classpathref="jepria-toolkit-libs" />
    <taskdef name="finishAppInstall" classname="com.technology.jep.jepriatoolkit.version.appinstall.FinishAppInstall" classpathref="jepria-toolkit-libs" />
  </target>

  <!-- Инициализация переменных модуля  -->
  <target name="init" depends="init-gwt">

    <!-- Обратная совместимость со старым сценарием сборки -->
    <property name="MODULE_NAME" value="${gwt-product-name}" />

    <!-- ... -->

    <!-- Определяем значения переменных по умолчанию. Если значения уже определены, то перезаписаны не будут. -->
    <property name="CONTEXT_PATH" value="/${MODULE_NAME}" />
    <echo message="CONTEXT_PATH: ${CONTEXT_PATH}" />

  </target>

  <!-- Создание файла лога -->
  <target name="start-log" depends="init">
    <!-- ... -->
  </target>

  <!-- ... -->

  <target name="war-and-tomcat.deploy" depends="war, release-doc">
    <!-- Во время разработки не нужно сохранять в базу информацию об установке. -->
    <!-- Для теста установки модуля СОВМЕСТНО С СОХРАНЕНИЕМ, необходимо использовать цель tomcat.deploy -->
    <antcall target="tomcat.deploy">
      <param name="SKIP_SAVE_INSTALL_INFO" value="1" />
    </antcall>
  </target>

  <target name="svn-version">
    <exec executable="svnversion" outputproperty="svnVersionRaw" resolveexecutable="true" failonerror="false" failifexecutionfails="false" />
    <propertyregex defaultvalue="" input="${svnVersionRaw}" override="true" property="svnVersionInfo" regexp="^(\d+\D*:?\d+\D*)$" select="\1" />
    <echo message="${svnVersionInfo}" />
  </target>

  <target name="svn-info">
    <exec executable="svn" outputproperty="svnPathRaw" resolveexecutable="true" failonerror="false" failifexecutionfails="false">
      <arg value="info" />
      <arg value="--xml" />
    </exec>
    <!--
        в регулярном выражение используется экранирование спец символов lt <, gt >
    -->
    <propertyregex property="svnPath"
                   input="${svnPathRaw}"
                   regexp="(?&lt;=&lt;url&gt;).*?(?=&lt;/url&gt;)"
                   select="\0"
                   casesensitive="false" />
    <echo message="${svnPath}" />
  </target>
  <!-- получаем домен и порт из DEPLOYMENT_PATH и PORT, если не задан localhost:80 -->
  <target name="get-server-domain">
    <fail unless="DEPLOYMENT_PATH" message="DEPLOYMENT_PATH not specified. Use -DEPLOYMENT_PATH=... command line argument." />
    <propertyregex property="DOMAIN"
                   input="${DEPLOYMENT_PATH}"
                   regexp="^(?:https?:\/\/)?([^:\/]+)"
                   select="\0"
                   casesensitive="false" />
    <propertyregex property="PORT"
                   input="${DEPLOYMENT_PATH}"
                   regexp="(?&lt;=:)[0-9]{2,5}"
                   select="\0"
                   casesensitive="false" />
    <condition property="DEPLOYMENT_PATH" value="http://localhost">
      <not>
        <isset property="DEPLOYMENT_PATH"/>
      </not>
    </condition>
    <condition property="PORT" value="80">
      <not>
        <isset property="PORT"/>
      </not>
    </condition>
    <echo message="${DOMAIN}:${PORT}" />
  </target>
  <target name="save-version-application" depends="svn-version, svn-info, define-toolkit-appinstall, get-server-domain, available-tomcat">
    <if>
      <isset property="SKIP_SAVE_INSTALL_INFO" />
      <then>
        <echo message="Skipping...." />
      </then>
      <else>
        <!-- проверяем соединение с ModuleInfo -->
        <fail message="App ModuleInfo is not available on ${DOMAIN}:${PORT}, please install it and run">
          <condition>
            <not>
              <!-- ModuleInfo выдает ошибку 400 если установлен и 404 если нет -->
              <http url="${DOMAIN}:${PORT}/ModuleInfo/versionServlet" errorsBeginAt="401"/>
            </not>
          </condition>
        </fail>
        <dirname file="." property="pdir" />
        <basename file="${pdir}" property="VERSION" />

        <startAppInstall appInstallResultId="appInstallResultId" deploymentPath="${DEPLOYMENT_PATH}" loadOperatorId="${LOAD_OPERATORID}" port="${PORT}" svnPath="${svnPath}" svnVersionInfo="${svnVersionInfo}" version="${VERSION}" />
        <!--
        <echo message="${startAppInstallResult}" />
        <echo message="${appInstallResultId}" />
        -->
      </else>
    </if>
  </target>

  <target name="finish-save-version-application" depends="define-toolkit-appinstall" unless="SKIP_SAVE_INSTALL_INFO">
    <finishAppInstall deploymentPath="${DEPLOYMENT_PATH}" port="${PORT}" loadOperatorId="${LOAD_OPERATORID}" appInstallResultId="${appInstallResultId}" StatusCode="${StatusCode}" errorMessage="${errorMessage}" />
  </target>

  <target name="available-tomcat">
    <condition property="VOID" value="/dev/null" else="NUL">
      <os family="unix" />
    </condition>
    <!-- проверяем соединение с Tomcat + проверка логин пароль-->
    <trycatch property="errorMessage">
      <try>
        <get src="${DOMAIN}:${PORT}/manager/html"
             dest="${VOID}"
             maxtime="3"
             username="${LOGIN}"
             password="${PASSWORD}"/>
      </try>
      <catch>
        <fail>
          [ERROR]: Tomcat is not available on ${DOMAIN}:${PORT} OR incorrect LOGIN/PASSWORD!
          ${errorMessage}
        </fail>
      </catch>
    </trycatch>
    <echo message="OK" />
  </target>

  <!-- ... -->

  <target name="define-tomcat">
    <taskdef name="tomcat.deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat-libs" />
    <taskdef name="tomcat.undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat-libs" />
  </target>

  <target name="tomcat.undeploy" description="Undeploy from Tomcat" depends="check-deploy-dependencies, start-log, define-tomcat, available-tomcat">
    <tomcat.undeploy
            failonerror="no"
            url="${DEPLOYMENT_PATH}"
            username="${LOGIN}"
            password="${PASSWORD}"
            path="${CONTEXT_PATH}"
    />
  </target>

  <target name="tomcat.deploy" description="Deploy to Tomcat" depends="check-deploy-dependencies, start-log, save-version-application, tomcat.undeploy, define-tomcat, available-tomcat">
    <echo message="Deploying lib/${MODULE_NAME}.war to:${DEPLOYMENT_PATH}"/>
    <echo message="Deploy to Tomcat..." />
    <echo message="LOGIN: ${LOGIN}" />

    <trycatch property="errorMessage">
      <try>
        <tomcat.deploy
                url="${DEPLOYMENT_PATH}"
                username="${LOGIN}"
                password="${PASSWORD}"
                path="${CONTEXT_PATH}"
                war="file:lib/${MODULE_NAME}.war"
                update="true" />

        <property name="StatusCode" value="0" />
        <property name="errorMessage" value="" />
      </try>
      <catch>
        <property name="StatusCode" value="1" />
        <fail message="[ERROR]: ${errorMessage}" />
      </catch>
      <finally>
        <antcall target="finish-save-version-application" />
      </finally>
    </trycatch>

  </target>

  <!-- ... -->

</project>